#include <iostream>
#include <cmath>
using namespace std;

class node{
public:
    int data;
    node* left;
    node* right;

    node(int val){
        data = val;
        left = NULL;
        right = NULL;
    }
};


class CBT{
public:
    node* root = NULL;
    int count = 0;
    int height = 0;
    int L_height = height - 1;

    void insert(int val)
    {
        node* temp = root;
        node* t = new node(val);

        if (root == NULL)
        {
            root = t;
            count++;
            return;
        }

        if(count == (pow (2, height+1))-1)
        {
            height++;

            if(temp->left == NULL && temp->right == NULL && height<L_height)
            {
                while(temp->left != NULL)
                {
                    temp= temp->left;
                }
                temp->left = t;
                count++;
                return;
            }

            else
            {
                while(temp->right != NULL && height < L_height)
                {
                    temp= temp->right;
                }
                temp->right = t;
                count++;
                return;

            }
        }
    }


    void print(node* curr)
    {
        if(curr->left != NULL)
        {
            print(curr->left);
        }

        cout<<curr->data<<"\t";


        if(curr->right != NULL)
        {
            print(curr->right);
        }




    }
};


int main() {
    CBT tree1;
    tree1.insert(1);
    tree1.insert(2);
    tree1.insert(3);
    tree1.print(tree1.root);
    return 0;
}
